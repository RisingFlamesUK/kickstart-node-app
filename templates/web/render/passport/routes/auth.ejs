<%_ /* templates/web/render/passport/routes/auth.ejs */ _%>
// This file is /routes/auth.js
import express from 'express';
import passport from 'passport';
import { ensureAuthenticated, ensureUnauthenticated } from '../utils/ensure-auth.js';
<%_ if (passportStrategies?.includes('local')) { _%>
import { createUser, findUserByEmail } from '../config/user-store.js';
<%_ } _%>

const router = express.Router();

/* ---- Helper Functions ---- */
function safePassportAuth(name, options) {
  return (req, res, next) => {
    try {
      // Passport keeps strategies on a private map; tolerate both cases
      const has =
        (typeof passport._strategy === 'function' && passport._strategy(name)) ||
        (passport?._strategies && passport._strategies[name]);
      if (!has) {
        req.flash?.('error', `${name} login isn't configured. Check your .env and restart the server.`);
        return res.redirect('/login');
      }
      return passport.authenticate(name, options)(req, res, next);
    } catch {
      req.flash?.('error', `${name} login isn't configured. Check your .env and restart the server.`);
      return res.redirect('/login');
    }
  };
}

/* ---------- Login ---------- */
router.get('/login', ensureUnauthenticated, (req, res) => {
  res.render('login', {
    title: 'Login',
    passportStrategies: <%- JSON.stringify(passportStrategies || []) %>,
    flash: req.flash ? req.flash() : {}
  });
});
<%_ if (passportStrategies?.includes('local')) { _%>
router.post(
  '/login',
  passport.authenticate('local', {
    successRedirect: '/',
    failureRedirect: '/login',
    failureFlash: true
  })
);
<%_ } _%>

/* ---------- Logout ---------- */
router.get('/logout', ensureAuthenticated, (req, res, next) => {
  // Passport v0.6 requires callback
  req.logout?.((err) => {
    if (err) return next(err);
    res.redirect('/');
  });
});

<%_ if (passportStrategies?.includes('local')) { _%>
/* ---------- Local: Register ---------- */
router.get('/register', ensureUnauthenticated, (req, res) => {
  res.render('register', {
    title: 'Create account',
    passportStrategies: <%- JSON.stringify(passportStrategies || []) %>,
    flash: req.flash ? req.flash() : {}
  });
});

router.post('/register', async (req, res) => {
  const { email, password, confirmPassword } = req.body || {};
  if (!email || !password) {
    req.flash?.('error', 'Email and password are required.');
    return res.redirect('/register');
  }

  const pw = String(password);
  const cpw = confirmPassword !== undefined ? String(confirmPassword) : undefined;

  if (cpw !== undefined && pw !== cpw) {
    req.flash?.('error', 'Passwords do not match.');
    return res.redirect('/register');
  }

  try {
    const existing = await findUserByEmail(email);
    if (existing) {
      req.flash?.('error', 'An account with that email already exists.');
      return res.redirect('/register');
    }

    const created = await createUser({ email, password }); // at least { id, email }
    req.login?.({ id: created.id, email: created.email }, (err) => {
      if (err) {
        req.flash?.('info', 'Account created. Please sign in.');
        return res.redirect('/login');
      }
      req.flash?.('info', 'Welcome! You are now signed in.');
      return res.redirect('/');
    });
  } catch (e) {
    req.flash?.('error', e?.message || 'Registration failed.');
    res.redirect('/register');
  }
});
<%_ } _%>

/* ---------- OAuth routes (generated only for selected strategies) ---------- */
<%_ if (passportStrategies?.includes('google')) { _%>
// Google OAuth 2.0
// Tip: If you need a refresh token, request it by adding "accessType: 'offline', prompt: 'consent'":
// router.get('/auth/google', safePassportAuth('google', { scope: ['email', 'profile'], accessType: 'offline', prompt: 'consent' }));
router.get('/auth/google', safePassportAuth('google', { scope: ['email', 'profile'] }));
router.get(
  '/auth/google/callback',
  safePassportAuth('google', { failureRedirect: '/login', failureFlash: true }),
  (req, res) => res.redirect('/')
);
<%_ } _%>
<%_ if (passportStrategies?.includes('microsoft')) { _%>
// Microsoft OAuth 2.0
router.get('/auth/microsoft', safePassportAuth('microsoft', { prompt: 'select_account' }));
router.get(
  '/auth/microsoft/callback',
  safePassportAuth('microsoft', { failureRedirect: '/login', failureFlash: true }),
  (req, res) => res.redirect('/')
);
<%_ } _%>

<%_ /* Add other providers here when you implement them */ _%>

export default router;
