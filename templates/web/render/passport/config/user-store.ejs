<%_ /* templates/web/render/passport/config/user-store.ejs */ _%>
// This file is /config/user-store.js
import { database } from './database.js';
import { hashPassword } from '../utils/security.js';
import { randomUUID } from 'crypto';

const USERS_TABLE = 'users';

// Ensure table exists
export async function initUserStore() {
  await database.query(`
    CREATE TABLE IF NOT EXISTS ${USERS_TABLE} (
      id UUID PRIMARY KEY,
      email TEXT UNIQUE,
      password_hash TEXT,
      provider TEXT,
      provider_id TEXT,
      display_name TEXT,
      created_at TIMESTAMP DEFAULT NOW()
    )
  `);

  await database.query(`
    CREATE INDEX IF NOT EXISTS idx_${USERS_TABLE}_provider
      ON ${USERS_TABLE}(provider, provider_id)
  `);
}

// Create a new local user
export async function createUser({ email, password }) {
  const id = randomUUID();
  const passwordHash = await hashPassword(password);

  await database.query(
    `INSERT INTO ${USERS_TABLE} (id, email, password_hash, provider, display_name)
     VALUES ($1, $2, $3, $4, $5)`,
    [id, email, passwordHash, 'local', email]
  );

  return { id, email };
}

// Find user by email
export async function findUserByEmail(email) {
  const { rows } = await database.query(
    `SELECT * FROM ${USERS_TABLE} WHERE email=$1`,
    [email]
  );
  return rows[0] || null;
}

// Find user by id (primary key)
export async function findUserById(id) {
  const { rows } = await database.query(
    `SELECT * FROM ${USERS_TABLE} WHERE id=$1`,
    [id]
  );
  return rows[0] || null;
}

// Create or find user for OAuth (google, microsoft, etc.)
// Expects { provider, profile }
export async function findOrCreateOAuthUser({ provider, profile }) {
  const email =
    profile?.emails?.[0]?.value ??
    profile?._json?.mail ??
    profile?._json?.userPrincipalName ??
    null;

  const providerId = profile?.id;

  // Try by provider + provider_id first
  let { rows } = await database.query(
    `SELECT * FROM ${USERS_TABLE} WHERE provider=$1 AND provider_id=$2`,
    [provider, providerId]
  );
  if (rows[0]) return rows[0];

  // If we have email, try to link to an existing local account
  if (email) {
    ({ rows } = await database.query(
      `SELECT * FROM ${USERS_TABLE} WHERE email=$1`,
      [email]
    ));
    if (rows[0]) {
      const user = rows[0];
      await database.query(
        `UPDATE ${USERS_TABLE} SET provider=$1, provider_id=$2 WHERE id=$3`,
        [provider, providerId, user.id]
      );
      return { ...user, provider, provider_id: providerId };
    }
  }

  // Create new user
  const newUser = {
    id: randomUUID(),
    email,
    provider,
    provider_id: providerId,
    display_name:
      profile?.displayName ||
      [profile?.name?.givenName, profile?.name?.familyName].filter(Boolean).join(' ') ||
      email ||
      '',
  };

  await database.query(
    `INSERT INTO ${USERS_TABLE} (id, email, provider, provider_id, display_name)
     VALUES ($1, $2, $3, $4, $5)`,
    [newUser.id, newUser.email, newUser.provider, newUser.provider_id, newUser.display_name]
  );

  return newUser;
}
