<%_ /* templates/web/render/base/README.md.ejs */ _%>
# <%= appName %>

A Node.js web app generated by **Kickstart Node**.

---

## 🚀 Quick Start

```bash
npm install
# if you keep an example env, otherwise edit .env directly
# cp .env.example .env
npm run dev   # or: npm start
```

App runs at: `http://localhost:<%= port %>`

---

## 📦 Scripts

* `npm run dev` — start the app in dev (uses nodemon if available)
* `npm start` — start the app with Node
<% if (passportStrategies && passportStrategies.includes('bearer')) { -%>
* `npm run user:create` — create a local user from the CLI
* `npm run token:issue` — issue a bearer token for an existing user
* `npm run token:create` — create a user (if missing) and issue a token
<% } -%>

---

## ⚙️ Configuration (.env)

```ini
PORT=<%= port %>
<% if (usePg) { -%>

# PostgreSQL
# PG_USER=postgres
# PG_PASS=
# PG_DB=<%= appName %>
# PG_PORT=5432
# PG_HOST=localhost
<% } -%>
<% if (useSession) { -%>

# Session
# SESSION_SECRET= # set in production; strong random string
<% } -%>
<% if (passportStrategies && passportStrategies.includes('google')) { -%>

# Google OAuth
# GOOGLE_CLIENT_ID=
# GOOGLE_CLIENT_SECRET=
# GOOGLE_CALLBACK_URL=http://localhost:<%= port %>/auth/google/callback
<% } -%>
<% if (passportStrategies && passportStrategies.includes('microsoft')) { -%>

# Microsoft OAuth
# MICROSOFT_CLIENT_ID=
# MICROSOFT_CLIENT_SECRET=
# MICROSOFT_TENANT=common
# MICROSOFT_CALLBACK_URL=http://localhost:<%= port %>/auth/microsoft/callback
<% } -%>
```

---

## 📚 Feature Docs

* **Architecture & Flows** → `docs/architecture.md`
<% if (usePg) { -%>
  - **PostgreSQL** → `docs/postgres.md`
<% } -%>
<% if (useSession) { -%>
  - **Sessions** → `docs/sessions.md`
<% } -%>
<% if (passportStrategies && passportStrategies.includes('local')) { -%>
  - **Local (email + password)** → `docs/local-sessions.md`
<% } -%>
<% if (passportStrategies && passportStrategies.includes('google')) { -%>
  - **Google OAuth 2.0** → `docs/google-oauth.md`
<% } -%>
<% if (passportStrategies && passportStrategies.includes('microsoft')) { -%>
  - **Microsoft OAuth 2.0** → `docs/microsoft-oauth.md`
<% } -%>
<% if (passportStrategies && passportStrategies.includes('bearer')) { -%>
  - **Bearer Tokens** → `docs/bearer-tokens.md`
<% } -%>

---

## 🧰 Tech Stack

* Node.js, Express, EJS views
<% if (usePg) { -%>
  - PostgreSQL (`pg`)
<% } -%>
<% if (useSession) { -%>
  - Sessions (`express-session` + `connect-pg-simple`)
<% } -%>
<% if (passportStrategies && passportStrategies.length) { -%>
  - Passport strategies: <%= passportStrategies.join(', ') %>
<% } -%>

---

## ✅ Health Checks

* `GET /` should render the home page.
* `GET /login` should load the login page; try the enabled providers.
<% if (passportStrategies && passportStrategies.includes('bearer')) { -%>
* Use `npm run token:create` then call the demo bearer-protected route `/api/me` (requires scope `read:me`).
<% } -%>

---

## 🔒 Security

* Never commit secrets; use `.env`.
* HTTPS in production.
* Rate limit auth endpoints.
* Keep dependencies up to date.
