<%_ /* this file is templates/web/render/base/env.ejs */ _%>
# This file is /.env
##########
# Server #
##########
PORT=<%= port %>
<%
  // Precompute feature flags to keep template readable
  const strategies = new Set((passportStrategies || []).map(String));
  const hasPg = !!usePg;
  const hasSession = !!useSession;
  const hasBearer = strategies.has('bearer');
  const oauthList = ['google','facebook','twitter','microsoft','linkedin','steam','amazon'];
  const hasOAuth = oauthList.some(p => strategies.has(p));
-%>
<% if (hasPg) { -%>

##############
# PostgreSQL #
##############
PG_USER=<%= pgUser %>
PG_PASS=<%= pgPassword %>
PG_DB=<%= pgDatabase %>
PG_PORT=<%= pgPort %>
PG_HOST=<%= pgHost %>
<% } -%>
<% if (hasSession) { -%>

#######################
# Sessions (optional) #
#######################
# SESSION_SECRET= # optional; if not set, app generates a random secret at runtime
<% } -%>
<% if (hasBearer) { -%>

#################
# Bearer Tokens #
#################
# TOKEN_HASH_PEPPER= # (optional) pepper for token hashes â€” do NOT commit
# Example (64 hex chars): 9f6c24d8d1d2d4f6a0f11c7bb9a98c41d6b6b5c49c5b1b7f2f1d9e7a0c3b6d9f
# Generate: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
<% } -%>
<% if (hasOAuth) { -%>

##########################################################################
# Passport OAuth provider settings (fill in only for the providers used) #
##########################################################################
<% } -%>
<% if (strategies.has('google')) { -%>
# Google OAuth
GOOGLE_CLIENT_ID=           # Your Google Client ID
GOOGLE_CLIENT_SECRET=       # Your Google Client secret
GOOGLE_CALLBACK_URL=http://localhost:<%= port %>/auth/google/callback   # Must match Authorized redirect URI
<% } -%>
<% if (strategies.has('facebook')) { -%>
# Facebook OAuth
FACEBOOK_APP_ID=
FACEBOOK_APP_SECRET=
FACEBOOK_CALLBACK_URL=http://localhost:<%= port %>/auth/facebook/callback
<% } -%>
<% if (strategies.has('twitter')) { -%>
# Twitter OAuth
TWITTER_CLIENT_ID=
TWITTER_CLIENT_SECRET=
TWITTER_CALLBACK_URL=http://localhost:<%= port %>/auth/twitter/callback
<% } -%>
<% if (strategies.has('microsoft')) { -%>
# Microsoft OAuth
MICROSOFT_CLIENT_ID=        # Application (client) ID
MICROSOFT_CLIENT_SECRET=    # Client secret Value
MICROSOFT_TENANT=common     # GUID tenant or: common | organizations | consumers
MICROSOFT_CALLBACK_URL=http://localhost:<%= port %>/auth/microsoft/callback  # Must match Redirect URI (type: Web)
<% } -%>
<% if (strategies.has('linkedin')) { -%>
# LinkedIn OAuth
LINKEDIN_CLIENT_ID=
LINKEDIN_CLIENT_SECRET=
LINKEDIN_CALLBACK_URL=http://localhost:<%= port %>/auth/linkedin/callback
<% } -%>
<% if (strategies.has('steam')) { -%>
# Steam OpenID
STEAM_API_KEY=
STEAM_REALM=http://localhost:<%= port %>
STEAM_RETURN_URL=http://localhost:<%= port %>/auth/steam/return
<% } -%>
<% if (strategies.has('amazon')) { -%>
# Amazon OAuth
AMAZON_CLIENT_ID=
AMAZON_CLIENT_SECRET=
AMAZON_CALLBACK_URL=http://localhost:<%= port %>/auth/amazon/callback
<% } -%>